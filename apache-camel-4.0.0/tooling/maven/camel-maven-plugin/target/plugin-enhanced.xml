<?xml version="1.0" encoding="UTF-8"?>

<!-- Generated by maven-plugin-tools 3.9 (enhanced XHTML version with additional elements (used for plugin:report))-->

<plugin>
  <name>Camel :: Maven Plugins :: Camel Maven Plugin</name>
  <description>Maven plugin to run Camel standalone</description>
  <groupId>org.apache.camel</groupId>
  <artifactId>camel-maven-plugin</artifactId>
  <version>4.0.0</version>
  <goalPrefix>camel</goalPrefix>
  <isolatedRealm>false</isolatedRealm>
  <inheritedByDefault>true</inheritedByDefault>
  <requiredJavaVersion>17</requiredJavaVersion>
  <requiredMavenVersion>3.9.4</requiredMavenVersion>
  <mojos>
    <mojo>
      <goal>debug</goal>
      <description>The maven goal allowing to automatically set up the Camel application in order to debug the Camel routes thanks to the Camel textual Route Debugger.</description>
      <requiresDependencyResolution>compile+runtime</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>prepare-package</phase>
      <implementation>org.apache.camel.maven.DebugMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>addOutputToClasspath</name>
          <type>boolean</type>
          <since>1.5.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Add project output directory to classpath. This might be undesirable when the exec plugin is run before the compile step. Default is &lt;code&gt;true&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>addResourcesToClasspath</name>
          <type>boolean</type>
          <since>1.5.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Add project resource directories to classpath. This is especially useful if the exec plugin is used for a code generator that reads its settings from the classpath.</description>
        </parameter>
        <parameter>
          <name>applicationContextUri</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The classpath based application context uri that spring want to gets.</description>
        </parameter>
        <parameter>
          <name>arguments</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>The class arguments.</description>
        </parameter>
        <parameter>
          <name>classpathScope</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Defines the scope of the classpath passed to the plugin. Set to compile,test,runtime or system depending on your needs. Since 1.1.2, the default value is &apos;runtime&apos; instead of &apos;compile&apos;.</description>
        </parameter>
        <parameter>
          <name>cleanupDaemonThreads</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to interrupt/join and possibly stop the daemon threads upon quitting. 
&lt;br /&gt;
 If this is &lt;code&gt;false&lt;/code&gt;, maven does nothing about the daemon threads. When maven has no more work to do, the VM will normally terminate any remaining daemon threads. 
&lt;p&gt;In certain cases (in particular if maven is embedded), you might need to keep this enabled to make sure threads are properly cleaned up to ensure they don&apos;t interfere with subsequent activity. In that case, see &lt;code&gt;daemonThreadJoinTimeout&lt;/code&gt;&lt;!-- no javadoc sites associated --&gt; and &lt;code&gt;stopUnresponsiveDaemonThreads&lt;/code&gt;&lt;!-- no javadoc sites associated --&gt; for further tuning.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>commandlineArgs</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Arguments separated by space for the executed program. For example: &quot;-j 20&quot;</description>
        </parameter>
        <parameter>
          <name>configAdminFileName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The configureAdmin persistent file name, it will be used when loading the camel context from blueprint.</description>
        </parameter>
        <parameter>
          <name>configAdminPid</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The configureAdmin persistent id, it will be used when loading the camel context from blueprint.</description>
        </parameter>
        <parameter>
          <name>daemonThreadJoinTimeout</name>
          <type>long</type>
          <required>false</required>
          <editable>true</editable>
          <description>This defines the number of milliseconds to wait for daemon threads to quit following their interruption.
&lt;br /&gt;
 This is only taken into account if &lt;code&gt;cleanupDaemonThreads&lt;/code&gt;&lt;!-- no javadoc sites associated --&gt; is &lt;code&gt;true&lt;/code&gt;. A value &amp;lt;=0 means to not timeout (i.e. wait indefinitely for threads to finish). Following a timeout, a warning will be logged. 
&lt;p&gt;Note: properly coded threads &lt;i&gt;should&lt;/i&gt; terminate upon interruption but some threads may prove problematic: as the VM does interrupt daemon threads, some code may not have been written to handle interruption properly. For example java.util.Timer is known to not handle interruptions in JDK &amp;lt;= 1.6. So it is not possible for us to infinitely wait by default otherwise maven could hang. A sensible default value has been chosen, but this default value &lt;i&gt;may change&lt;/i&gt; in the future based on user feedback.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>duration</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Sets the time duration (seconds) that the application will run for before terminating. A value &amp;lt;= 0 will run forever.</description>
        </parameter>
        <parameter>
          <name>durationIdle</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Sets the idle time duration (seconds) duration that the application can be idle before terminating. A value &amp;lt;= 0 will run forever.</description>
        </parameter>
        <parameter>
          <name>durationMaxMessages</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Sets the duration of maximum number of messages that the application will process before terminating.</description>
        </parameter>
        <parameter>
          <name>executableDependency</name>
          <type>org.codehaus.mojo.exec.ExecutableDependency</type>
          <required>false</required>
          <editable>true</editable>
          <description>If provided the ExecutableDependency identifies which of the plugin dependencies contains the executable class. This will have the affect of only including plugin dependencies required by the identified ExecutableDependency. 
&lt;p&gt;&lt;/p&gt; If includeProjectDependencies is set to &lt;code&gt;true&lt;/code&gt;, all of the project dependencies will be included on the executable&apos;s classpath. Whether a particular project dependency is a dependency of the identified ExecutableDependency will be irrelevant to its inclusion in the classpath.</description>
        </parameter>
        <parameter>
          <name>fileApplicationContextUri</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The filesystem based application context uri that spring want to gets.</description>
        </parameter>
        <parameter>
          <name>includePluginDependencies</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Indicates if this plugin&apos;s dependencies should be used when executing the main class. 
&lt;p&gt;&lt;/p&gt; This is useful when project dependencies are not appropriate. Using only the plugin dependencies can be particularly useful when the project is not a java project. For example a mvn project using the csharp plugins only expects to see dotnet libraries as dependencies.</description>
        </parameter>
        <parameter>
          <name>includeProjectDependencies</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Indicates if the project dependencies should be used when executing the main class.</description>
        </parameter>
        <parameter>
          <name>keepAlive</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Deprecated; this is not needed anymore. Indicates if mojo should be kept running after the mainclass terminates. Usefull for serverlike apps with deamonthreads.</description>
        </parameter>
        <parameter>
          <name>localRepository</name>
          <type>org.apache.maven.artifact.repository.ArtifactRepository</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>logClasspath</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to log the classpath when starting</description>
        </parameter>
        <parameter>
          <name>loggingLevel</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to use built-in console logging (uses log4j), which does not require to add any logging dependency to your project. However, the logging is fixed to log to the console, with a color style that is similar to Spring Boot. You can change the root logging level to: FATAL, ERROR, WARN, INFO, DEBUG, TRACE, OFF</description>
        </parameter>
        <parameter>
          <name>mainClass</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The main class to execute.</description>
        </parameter>
        <parameter>
          <name>mojo</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>pluginDependencies</name>
          <type>java.util.List&lt;org.apache.maven.artifact.Artifact&gt;</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description>The maven project.</description>
        </parameter>
        <parameter>
          <name>remoteRepositories</name>
          <type>java.util.List&lt;org.apache.maven.artifact.repository.ArtifactRepository&gt;</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>routesDirectory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>To watch the directory for file changes which triggers a live reload of the Camel routes on-the-fly.</description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>skip</name>
          <alias>skip</alias>
          <type>boolean</type>
          <since>1.0.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Skip the execution. Starting with version 1.4.0 the former name &lt;code&gt;skip&lt;/code&gt; has been changed into &lt;code&gt;exec.skip&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>sourceRoot</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>This folder is added to the list of those folders containing source to be compiled. Use this if your plugin generates source code.</description>
        </parameter>
        <parameter>
          <name>stopUnresponsiveDaemonThreads</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Wether to call &lt;code&gt;Thread.stop()&lt;/code&gt;&lt;!-- no javadoc sites associated --&gt; following a timing out of waiting for an interrupted thread to finish. This is only taken into account if &lt;code&gt;cleanupDaemonThreads&lt;/code&gt;&lt;!-- no javadoc sites associated --&gt; is &lt;code&gt;true&lt;/code&gt; and the &lt;code&gt;daemonThreadJoinTimeout&lt;/code&gt;&lt;!-- no javadoc sites associated --&gt; threshold has been reached for an uncooperative thread. If this is &lt;code&gt;false&lt;/code&gt;, or if &lt;code&gt;Thread.stop()&lt;/code&gt;&lt;!-- no javadoc sites associated --&gt; fails to get the thread to stop, then a warning is logged and Maven will continue on while the affected threads (and related objects in memory) linger on. Consider setting this to &lt;code&gt;true&lt;/code&gt; if you are invoking problematic code that you can&apos;t fix. An example is &lt;code&gt;java.util.Timer&lt;/code&gt;&lt;!-- no javadoc sites associated --&gt; which doesn&apos;t respond to interruption. To have &lt;code&gt;Timer&lt;/code&gt; fixed, vote for &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6336543&quot;&gt;this bug&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>suspend</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Indicates whether the message processing done by Camel should be suspended as long as a debugger is not attached.</description>
        </parameter>
        <parameter>
          <name>testSourceRoot</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>This folder is added to the list of those folders containing source to be compiled for testing. Use this if your plugin generates test source code.</description>
        </parameter>
        <parameter>
          <name>trace</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to enable the tracer or not</description>
        </parameter>
        <parameter>
          <name>useKamelet</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to use Kamelet (camel-main-kamelet) when running, instead of Spring</description>
        </parameter>
      </parameters>
      <configuration>
        <addOutputToClasspath implementation="boolean" default-value="true">${addOutputToClasspath}</addOutputToClasspath>
        <addResourcesToClasspath implementation="boolean" default-value="false">${addResourcesToClasspath}</addResourcesToClasspath>
        <applicationContextUri implementation="java.lang.String">${camel.applicationContextUri}</applicationContextUri>
        <arguments implementation="java.lang.String[]">${camel.arguments}</arguments>
        <classpathScope implementation="java.lang.String" default-value="runtime">${exec.classpathScope}</classpathScope>
        <cleanupDaemonThreads implementation="boolean" default-value="true">${camel.cleanupDaemonThreads}</cleanupDaemonThreads>
        <commandlineArgs implementation="java.lang.String">${exec.args}</commandlineArgs>
        <configAdminFileName implementation="java.lang.String">${camel.configAdminFileName}</configAdminFileName>
        <configAdminPid implementation="java.lang.String">${camel.configAdminPid}</configAdminPid>
        <daemonThreadJoinTimeout implementation="long" default-value="15000">${camel.daemonThreadJoinTimeout}</daemonThreadJoinTimeout>
        <duration implementation="java.lang.String" default-value="-1">${camel.duration}</duration>
        <durationIdle implementation="java.lang.String" default-value="-1">${camel.durationIdle}</durationIdle>
        <durationMaxMessages implementation="java.lang.String" default-value="-1">${camel.duration.maxMessages}</durationMaxMessages>
        <executableDependency implementation="org.codehaus.mojo.exec.ExecutableDependency">${camel.executableDependency}</executableDependency>
        <fileApplicationContextUri implementation="java.lang.String">${camel.fileApplicationContextUri}</fileApplicationContextUri>
        <includePluginDependencies implementation="boolean" default-value="false">${camel.includePluginDependencies}</includePluginDependencies>
        <includeProjectDependencies implementation="boolean" default-value="true">${camel.includeProjectDependencies}</includeProjectDependencies>
        <keepAlive implementation="boolean">${camel.keepAlive}</keepAlive>
        <localRepository implementation="org.apache.maven.artifact.repository.ArtifactRepository">${localRepository}</localRepository>
        <logClasspath implementation="boolean" default-value="false">${camel.logClasspath}</logClasspath>
        <loggingLevel implementation="java.lang.String" default-value="OFF">${camel.loggingLevel}</loggingLevel>
        <mainClass implementation="java.lang.String">${camel.mainClass}</mainClass>
        <mojo implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <pluginDependencies implementation="java.util.List">${plugin.artifacts}</pluginDependencies>
        <project implementation="org.apache.maven.project.MavenProject">${project}</project>
        <remoteRepositories implementation="java.util.List">${project.remoteArtifactRepositories}</remoteRepositories>
        <routesDirectory implementation="java.lang.String">${camel.routesDirectory}</routesDirectory>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
        <skip implementation="boolean" default-value="false">${exec.skip}</skip>
        <sourceRoot implementation="java.io.File">${sourceRoot}</sourceRoot>
        <stopUnresponsiveDaemonThreads implementation="boolean" default-value="15000">${camel.stopUnresponsiveDaemonThreads}</stopUnresponsiveDaemonThreads>
        <suspend implementation="boolean" default-value="true">${camel.suspend}</suspend>
        <testSourceRoot implementation="java.io.File">${testSourceRoot}</testSourceRoot>
        <trace implementation="boolean">${camel.trace}</trace>
        <useKamelet implementation="java.lang.Boolean">${camel.useKamelet}</useKamelet>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.artifact.factory.ArtifactFactory</role>
          <field-name>artifactFactory</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.resolver.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.metadata.ArtifactMetadataSource</role>
          <field-name>metadataSource</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.MavenProjectBuilder</role>
          <field-name>projectBuilder</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>dev</goal>
      <requiresDependencyResolution>compile+runtime</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>prepare-package</phase>
      <implementation>org.apache.camel.maven.DevMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>addOutputToClasspath</name>
          <type>boolean</type>
          <since>1.5.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Add project output directory to classpath. This might be undesirable when the exec plugin is run before the compile step. Default is &lt;code&gt;true&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>addResourcesToClasspath</name>
          <type>boolean</type>
          <since>1.5.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Add project resource directories to classpath. This is especially useful if the exec plugin is used for a code generator that reads its settings from the classpath.</description>
        </parameter>
        <parameter>
          <name>applicationContextUri</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The classpath based application context uri that spring want to gets.</description>
        </parameter>
        <parameter>
          <name>arguments</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>The class arguments.</description>
        </parameter>
        <parameter>
          <name>classpathScope</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Defines the scope of the classpath passed to the plugin. Set to compile,test,runtime or system depending on your needs. Since 1.1.2, the default value is &apos;runtime&apos; instead of &apos;compile&apos;.</description>
        </parameter>
        <parameter>
          <name>cleanupDaemonThreads</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to interrupt/join and possibly stop the daemon threads upon quitting. 
&lt;br /&gt;
 If this is &lt;code&gt;false&lt;/code&gt;, maven does nothing about the daemon threads. When maven has no more work to do, the VM will normally terminate any remaining daemon threads. 
&lt;p&gt;In certain cases (in particular if maven is embedded), you might need to keep this enabled to make sure threads are properly cleaned up to ensure they don&apos;t interfere with subsequent activity. In that case, see &lt;code&gt;daemonThreadJoinTimeout&lt;/code&gt;&lt;!-- no javadoc sites associated --&gt; and &lt;code&gt;stopUnresponsiveDaemonThreads&lt;/code&gt;&lt;!-- no javadoc sites associated --&gt; for further tuning.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>commandlineArgs</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Arguments separated by space for the executed program. For example: &quot;-j 20&quot;</description>
        </parameter>
        <parameter>
          <name>configAdminFileName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The configureAdmin persistent file name, it will be used when loading the camel context from blueprint.</description>
        </parameter>
        <parameter>
          <name>configAdminPid</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The configureAdmin persistent id, it will be used when loading the camel context from blueprint.</description>
        </parameter>
        <parameter>
          <name>daemonThreadJoinTimeout</name>
          <type>long</type>
          <required>false</required>
          <editable>true</editable>
          <description>This defines the number of milliseconds to wait for daemon threads to quit following their interruption.
&lt;br /&gt;
 This is only taken into account if &lt;code&gt;cleanupDaemonThreads&lt;/code&gt;&lt;!-- no javadoc sites associated --&gt; is &lt;code&gt;true&lt;/code&gt;. A value &amp;lt;=0 means to not timeout (i.e. wait indefinitely for threads to finish). Following a timeout, a warning will be logged. 
&lt;p&gt;Note: properly coded threads &lt;i&gt;should&lt;/i&gt; terminate upon interruption but some threads may prove problematic: as the VM does interrupt daemon threads, some code may not have been written to handle interruption properly. For example java.util.Timer is known to not handle interruptions in JDK &amp;lt;= 1.6. So it is not possible for us to infinitely wait by default otherwise maven could hang. A sensible default value has been chosen, but this default value &lt;i&gt;may change&lt;/i&gt; in the future based on user feedback.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>duration</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Sets the time duration (seconds) that the application will run for before terminating. A value &amp;lt;= 0 will run forever.</description>
        </parameter>
        <parameter>
          <name>durationIdle</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Sets the idle time duration (seconds) duration that the application can be idle before terminating. A value &amp;lt;= 0 will run forever.</description>
        </parameter>
        <parameter>
          <name>durationMaxMessages</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Sets the duration of maximum number of messages that the application will process before terminating.</description>
        </parameter>
        <parameter>
          <name>executableDependency</name>
          <type>org.codehaus.mojo.exec.ExecutableDependency</type>
          <required>false</required>
          <editable>true</editable>
          <description>If provided the ExecutableDependency identifies which of the plugin dependencies contains the executable class. This will have the affect of only including plugin dependencies required by the identified ExecutableDependency. 
&lt;p&gt;&lt;/p&gt; If includeProjectDependencies is set to &lt;code&gt;true&lt;/code&gt;, all of the project dependencies will be included on the executable&apos;s classpath. Whether a particular project dependency is a dependency of the identified ExecutableDependency will be irrelevant to its inclusion in the classpath.</description>
        </parameter>
        <parameter>
          <name>fileApplicationContextUri</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The filesystem based application context uri that spring want to gets.</description>
        </parameter>
        <parameter>
          <name>includePluginDependencies</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Indicates if this plugin&apos;s dependencies should be used when executing the main class. 
&lt;p&gt;&lt;/p&gt; This is useful when project dependencies are not appropriate. Using only the plugin dependencies can be particularly useful when the project is not a java project. For example a mvn project using the csharp plugins only expects to see dotnet libraries as dependencies.</description>
        </parameter>
        <parameter>
          <name>includeProjectDependencies</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Indicates if the project dependencies should be used when executing the main class.</description>
        </parameter>
        <parameter>
          <name>keepAlive</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Deprecated; this is not needed anymore. Indicates if mojo should be kept running after the mainclass terminates. Usefull for serverlike apps with deamonthreads.</description>
        </parameter>
        <parameter>
          <name>localRepository</name>
          <type>org.apache.maven.artifact.repository.ArtifactRepository</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>logClasspath</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to log the classpath when starting</description>
        </parameter>
        <parameter>
          <name>loggingLevel</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to use built-in console logging (uses log4j), which does not require to add any logging dependency to your project. However, the logging is fixed to log to the console, with a color style that is similar to Spring Boot. You can change the root logging level to: FATAL, ERROR, WARN, INFO, DEBUG, TRACE, OFF</description>
        </parameter>
        <parameter>
          <name>mainClass</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The main class to execute.</description>
        </parameter>
        <parameter>
          <name>pluginDependencies</name>
          <type>java.util.List&lt;org.apache.maven.artifact.Artifact&gt;</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description>The maven project.</description>
        </parameter>
        <parameter>
          <name>remoteRepositories</name>
          <type>java.util.List&lt;org.apache.maven.artifact.repository.ArtifactRepository&gt;</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>routesDirectory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>To watch the directory for file changes which triggers a live reload of the Camel routes on-the-fly.</description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>skip</name>
          <alias>skip</alias>
          <type>boolean</type>
          <since>1.0.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Skip the execution. Starting with version 1.4.0 the former name &lt;code&gt;skip&lt;/code&gt; has been changed into &lt;code&gt;exec.skip&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>sourceRoot</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>This folder is added to the list of those folders containing source to be compiled. Use this if your plugin generates source code.</description>
        </parameter>
        <parameter>
          <name>stopUnresponsiveDaemonThreads</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Wether to call &lt;code&gt;Thread.stop()&lt;/code&gt;&lt;!-- no javadoc sites associated --&gt; following a timing out of waiting for an interrupted thread to finish. This is only taken into account if &lt;code&gt;cleanupDaemonThreads&lt;/code&gt;&lt;!-- no javadoc sites associated --&gt; is &lt;code&gt;true&lt;/code&gt; and the &lt;code&gt;daemonThreadJoinTimeout&lt;/code&gt;&lt;!-- no javadoc sites associated --&gt; threshold has been reached for an uncooperative thread. If this is &lt;code&gt;false&lt;/code&gt;, or if &lt;code&gt;Thread.stop()&lt;/code&gt;&lt;!-- no javadoc sites associated --&gt; fails to get the thread to stop, then a warning is logged and Maven will continue on while the affected threads (and related objects in memory) linger on. Consider setting this to &lt;code&gt;true&lt;/code&gt; if you are invoking problematic code that you can&apos;t fix. An example is &lt;code&gt;java.util.Timer&lt;/code&gt;&lt;!-- no javadoc sites associated --&gt; which doesn&apos;t respond to interruption. To have &lt;code&gt;Timer&lt;/code&gt; fixed, vote for &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6336543&quot;&gt;this bug&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>testSourceRoot</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>This folder is added to the list of those folders containing source to be compiled for testing. Use this if your plugin generates test source code.</description>
        </parameter>
        <parameter>
          <name>trace</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to enable the tracer or not</description>
        </parameter>
        <parameter>
          <name>useKamelet</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to use Kamelet (camel-main-kamelet) when running, instead of Spring</description>
        </parameter>
      </parameters>
      <configuration>
        <addOutputToClasspath implementation="boolean" default-value="true">${addOutputToClasspath}</addOutputToClasspath>
        <addResourcesToClasspath implementation="boolean" default-value="false">${addResourcesToClasspath}</addResourcesToClasspath>
        <applicationContextUri implementation="java.lang.String">${camel.applicationContextUri}</applicationContextUri>
        <arguments implementation="java.lang.String[]">${camel.arguments}</arguments>
        <classpathScope implementation="java.lang.String" default-value="runtime">${exec.classpathScope}</classpathScope>
        <cleanupDaemonThreads implementation="boolean" default-value="true">${camel.cleanupDaemonThreads}</cleanupDaemonThreads>
        <commandlineArgs implementation="java.lang.String">${exec.args}</commandlineArgs>
        <configAdminFileName implementation="java.lang.String">${camel.configAdminFileName}</configAdminFileName>
        <configAdminPid implementation="java.lang.String">${camel.configAdminPid}</configAdminPid>
        <daemonThreadJoinTimeout implementation="long" default-value="15000">${camel.daemonThreadJoinTimeout}</daemonThreadJoinTimeout>
        <duration implementation="java.lang.String" default-value="-1">${camel.duration}</duration>
        <durationIdle implementation="java.lang.String" default-value="-1">${camel.durationIdle}</durationIdle>
        <durationMaxMessages implementation="java.lang.String" default-value="-1">${camel.duration.maxMessages}</durationMaxMessages>
        <executableDependency implementation="org.codehaus.mojo.exec.ExecutableDependency">${camel.executableDependency}</executableDependency>
        <fileApplicationContextUri implementation="java.lang.String">${camel.fileApplicationContextUri}</fileApplicationContextUri>
        <includePluginDependencies implementation="boolean" default-value="false">${camel.includePluginDependencies}</includePluginDependencies>
        <includeProjectDependencies implementation="boolean" default-value="true">${camel.includeProjectDependencies}</includeProjectDependencies>
        <keepAlive implementation="boolean">${camel.keepAlive}</keepAlive>
        <localRepository implementation="org.apache.maven.artifact.repository.ArtifactRepository">${localRepository}</localRepository>
        <logClasspath implementation="boolean" default-value="false">${camel.logClasspath}</logClasspath>
        <loggingLevel implementation="java.lang.String" default-value="OFF">${camel.loggingLevel}</loggingLevel>
        <mainClass implementation="java.lang.String">${camel.mainClass}</mainClass>
        <pluginDependencies implementation="java.util.List">${plugin.artifacts}</pluginDependencies>
        <project implementation="org.apache.maven.project.MavenProject">${project}</project>
        <remoteRepositories implementation="java.util.List">${project.remoteArtifactRepositories}</remoteRepositories>
        <routesDirectory implementation="java.lang.String">${camel.routesDirectory}</routesDirectory>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
        <skip implementation="boolean" default-value="false">${exec.skip}</skip>
        <sourceRoot implementation="java.io.File">${sourceRoot}</sourceRoot>
        <stopUnresponsiveDaemonThreads implementation="boolean" default-value="15000">${camel.stopUnresponsiveDaemonThreads}</stopUnresponsiveDaemonThreads>
        <testSourceRoot implementation="java.io.File">${testSourceRoot}</testSourceRoot>
        <trace implementation="boolean">${camel.trace}</trace>
        <useKamelet implementation="java.lang.Boolean">${camel.useKamelet}</useKamelet>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.artifact.factory.ArtifactFactory</role>
          <field-name>artifactFactory</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.resolver.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.metadata.ArtifactMetadataSource</role>
          <field-name>metadataSource</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.MavenProjectBuilder</role>
          <field-name>projectBuilder</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>prepare-fatjar</goal>
      <requiresDependencyResolution>compile</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>prepare-package</phase>
      <implementation>org.apache.camel.maven.PrepareFatJarMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>classesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <classesDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <project implementation="org.apache.maven.project.MavenProject">${project}</project>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.artifact.factory.ArtifactFactory</role>
          <field-name>artifactFactory</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>run</goal>
      <description>Runs a CamelContext using any Spring configuration files found in &lt;code&gt;META-INF/spring/*.xml&lt;/code&gt;, and &lt;code&gt;camel-*.xml&lt;/code&gt; and starting up the context.</description>
      <requiresDependencyResolution>compile+runtime</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>prepare-package</phase>
      <implementation>org.apache.camel.maven.RunMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>addOutputToClasspath</name>
          <type>boolean</type>
          <since>1.5.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Add project output directory to classpath. This might be undesirable when the exec plugin is run before the compile step. Default is &lt;code&gt;true&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>addResourcesToClasspath</name>
          <type>boolean</type>
          <since>1.5.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Add project resource directories to classpath. This is especially useful if the exec plugin is used for a code generator that reads its settings from the classpath.</description>
        </parameter>
        <parameter>
          <name>applicationContextUri</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The classpath based application context uri that spring want to gets.</description>
        </parameter>
        <parameter>
          <name>arguments</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>The class arguments.</description>
        </parameter>
        <parameter>
          <name>classpathScope</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Defines the scope of the classpath passed to the plugin. Set to compile,test,runtime or system depending on your needs. Since 1.1.2, the default value is &apos;runtime&apos; instead of &apos;compile&apos;.</description>
        </parameter>
        <parameter>
          <name>cleanupDaemonThreads</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to interrupt/join and possibly stop the daemon threads upon quitting. 
&lt;br /&gt;
 If this is &lt;code&gt;false&lt;/code&gt;, maven does nothing about the daemon threads. When maven has no more work to do, the VM will normally terminate any remaining daemon threads. 
&lt;p&gt;In certain cases (in particular if maven is embedded), you might need to keep this enabled to make sure threads are properly cleaned up to ensure they don&apos;t interfere with subsequent activity. In that case, see &lt;code&gt;daemonThreadJoinTimeout&lt;/code&gt;&lt;!-- no javadoc sites associated --&gt; and &lt;code&gt;stopUnresponsiveDaemonThreads&lt;/code&gt;&lt;!-- no javadoc sites associated --&gt; for further tuning.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>commandlineArgs</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Arguments separated by space for the executed program. For example: &quot;-j 20&quot;</description>
        </parameter>
        <parameter>
          <name>configAdminFileName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The configureAdmin persistent file name, it will be used when loading the camel context from blueprint.</description>
        </parameter>
        <parameter>
          <name>configAdminPid</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The configureAdmin persistent id, it will be used when loading the camel context from blueprint.</description>
        </parameter>
        <parameter>
          <name>daemonThreadJoinTimeout</name>
          <type>long</type>
          <required>false</required>
          <editable>true</editable>
          <description>This defines the number of milliseconds to wait for daemon threads to quit following their interruption.
&lt;br /&gt;
 This is only taken into account if &lt;code&gt;cleanupDaemonThreads&lt;/code&gt;&lt;!-- no javadoc sites associated --&gt; is &lt;code&gt;true&lt;/code&gt;. A value &amp;lt;=0 means to not timeout (i.e. wait indefinitely for threads to finish). Following a timeout, a warning will be logged. 
&lt;p&gt;Note: properly coded threads &lt;i&gt;should&lt;/i&gt; terminate upon interruption but some threads may prove problematic: as the VM does interrupt daemon threads, some code may not have been written to handle interruption properly. For example java.util.Timer is known to not handle interruptions in JDK &amp;lt;= 1.6. So it is not possible for us to infinitely wait by default otherwise maven could hang. A sensible default value has been chosen, but this default value &lt;i&gt;may change&lt;/i&gt; in the future based on user feedback.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>duration</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Sets the time duration (seconds) that the application will run for before terminating. A value &amp;lt;= 0 will run forever.</description>
        </parameter>
        <parameter>
          <name>durationIdle</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Sets the idle time duration (seconds) duration that the application can be idle before terminating. A value &amp;lt;= 0 will run forever.</description>
        </parameter>
        <parameter>
          <name>durationMaxMessages</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Sets the duration of maximum number of messages that the application will process before terminating.</description>
        </parameter>
        <parameter>
          <name>executableDependency</name>
          <type>org.codehaus.mojo.exec.ExecutableDependency</type>
          <required>false</required>
          <editable>true</editable>
          <description>If provided the ExecutableDependency identifies which of the plugin dependencies contains the executable class. This will have the affect of only including plugin dependencies required by the identified ExecutableDependency. 
&lt;p&gt;&lt;/p&gt; If includeProjectDependencies is set to &lt;code&gt;true&lt;/code&gt;, all of the project dependencies will be included on the executable&apos;s classpath. Whether a particular project dependency is a dependency of the identified ExecutableDependency will be irrelevant to its inclusion in the classpath.</description>
        </parameter>
        <parameter>
          <name>fileApplicationContextUri</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The filesystem based application context uri that spring want to gets.</description>
        </parameter>
        <parameter>
          <name>includePluginDependencies</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Indicates if this plugin&apos;s dependencies should be used when executing the main class. 
&lt;p&gt;&lt;/p&gt; This is useful when project dependencies are not appropriate. Using only the plugin dependencies can be particularly useful when the project is not a java project. For example a mvn project using the csharp plugins only expects to see dotnet libraries as dependencies.</description>
        </parameter>
        <parameter>
          <name>includeProjectDependencies</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Indicates if the project dependencies should be used when executing the main class.</description>
        </parameter>
        <parameter>
          <name>keepAlive</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Deprecated; this is not needed anymore. Indicates if mojo should be kept running after the mainclass terminates. Usefull for serverlike apps with deamonthreads.</description>
        </parameter>
        <parameter>
          <name>localRepository</name>
          <type>org.apache.maven.artifact.repository.ArtifactRepository</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>logClasspath</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to log the classpath when starting</description>
        </parameter>
        <parameter>
          <name>loggingLevel</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to use built-in console logging (uses log4j), which does not require to add any logging dependency to your project. However, the logging is fixed to log to the console, with a color style that is similar to Spring Boot. You can change the root logging level to: FATAL, ERROR, WARN, INFO, DEBUG, TRACE, OFF</description>
        </parameter>
        <parameter>
          <name>mainClass</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The main class to execute.</description>
        </parameter>
        <parameter>
          <name>pluginDependencies</name>
          <type>java.util.List&lt;org.apache.maven.artifact.Artifact&gt;</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description>The maven project.</description>
        </parameter>
        <parameter>
          <name>remoteRepositories</name>
          <type>java.util.List&lt;org.apache.maven.artifact.repository.ArtifactRepository&gt;</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>skip</name>
          <alias>skip</alias>
          <type>boolean</type>
          <since>1.0.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Skip the execution. Starting with version 1.4.0 the former name &lt;code&gt;skip&lt;/code&gt; has been changed into &lt;code&gt;exec.skip&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>sourceRoot</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>This folder is added to the list of those folders containing source to be compiled. Use this if your plugin generates source code.</description>
        </parameter>
        <parameter>
          <name>stopUnresponsiveDaemonThreads</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Wether to call &lt;code&gt;Thread.stop()&lt;/code&gt;&lt;!-- no javadoc sites associated --&gt; following a timing out of waiting for an interrupted thread to finish. This is only taken into account if &lt;code&gt;cleanupDaemonThreads&lt;/code&gt;&lt;!-- no javadoc sites associated --&gt; is &lt;code&gt;true&lt;/code&gt; and the &lt;code&gt;daemonThreadJoinTimeout&lt;/code&gt;&lt;!-- no javadoc sites associated --&gt; threshold has been reached for an uncooperative thread. If this is &lt;code&gt;false&lt;/code&gt;, or if &lt;code&gt;Thread.stop()&lt;/code&gt;&lt;!-- no javadoc sites associated --&gt; fails to get the thread to stop, then a warning is logged and Maven will continue on while the affected threads (and related objects in memory) linger on. Consider setting this to &lt;code&gt;true&lt;/code&gt; if you are invoking problematic code that you can&apos;t fix. An example is &lt;code&gt;java.util.Timer&lt;/code&gt;&lt;!-- no javadoc sites associated --&gt; which doesn&apos;t respond to interruption. To have &lt;code&gt;Timer&lt;/code&gt; fixed, vote for &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6336543&quot;&gt;this bug&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>testSourceRoot</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>This folder is added to the list of those folders containing source to be compiled for testing. Use this if your plugin generates test source code.</description>
        </parameter>
        <parameter>
          <name>trace</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to enable the tracer or not</description>
        </parameter>
        <parameter>
          <name>useKamelet</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to use Kamelet (camel-main-kamelet) when running, instead of Spring</description>
        </parameter>
      </parameters>
      <configuration>
        <addOutputToClasspath implementation="boolean" default-value="true">${addOutputToClasspath}</addOutputToClasspath>
        <addResourcesToClasspath implementation="boolean" default-value="false">${addResourcesToClasspath}</addResourcesToClasspath>
        <applicationContextUri implementation="java.lang.String">${camel.applicationContextUri}</applicationContextUri>
        <arguments implementation="java.lang.String[]">${camel.arguments}</arguments>
        <classpathScope implementation="java.lang.String" default-value="runtime">${exec.classpathScope}</classpathScope>
        <cleanupDaemonThreads implementation="boolean" default-value="true">${camel.cleanupDaemonThreads}</cleanupDaemonThreads>
        <commandlineArgs implementation="java.lang.String">${exec.args}</commandlineArgs>
        <configAdminFileName implementation="java.lang.String">${camel.configAdminFileName}</configAdminFileName>
        <configAdminPid implementation="java.lang.String">${camel.configAdminPid}</configAdminPid>
        <daemonThreadJoinTimeout implementation="long" default-value="15000">${camel.daemonThreadJoinTimeout}</daemonThreadJoinTimeout>
        <duration implementation="java.lang.String" default-value="-1">${camel.duration}</duration>
        <durationIdle implementation="java.lang.String" default-value="-1">${camel.durationIdle}</durationIdle>
        <durationMaxMessages implementation="java.lang.String" default-value="-1">${camel.duration.maxMessages}</durationMaxMessages>
        <executableDependency implementation="org.codehaus.mojo.exec.ExecutableDependency">${camel.executableDependency}</executableDependency>
        <fileApplicationContextUri implementation="java.lang.String">${camel.fileApplicationContextUri}</fileApplicationContextUri>
        <includePluginDependencies implementation="boolean" default-value="false">${camel.includePluginDependencies}</includePluginDependencies>
        <includeProjectDependencies implementation="boolean" default-value="true">${camel.includeProjectDependencies}</includeProjectDependencies>
        <keepAlive implementation="boolean">${camel.keepAlive}</keepAlive>
        <localRepository implementation="org.apache.maven.artifact.repository.ArtifactRepository">${localRepository}</localRepository>
        <logClasspath implementation="boolean" default-value="false">${camel.logClasspath}</logClasspath>
        <loggingLevel implementation="java.lang.String" default-value="OFF">${camel.loggingLevel}</loggingLevel>
        <mainClass implementation="java.lang.String">${camel.mainClass}</mainClass>
        <pluginDependencies implementation="java.util.List">${plugin.artifacts}</pluginDependencies>
        <project implementation="org.apache.maven.project.MavenProject">${project}</project>
        <remoteRepositories implementation="java.util.List">${project.remoteArtifactRepositories}</remoteRepositories>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
        <skip implementation="boolean" default-value="false">${exec.skip}</skip>
        <sourceRoot implementation="java.io.File">${sourceRoot}</sourceRoot>
        <stopUnresponsiveDaemonThreads implementation="boolean" default-value="15000">${camel.stopUnresponsiveDaemonThreads}</stopUnresponsiveDaemonThreads>
        <testSourceRoot implementation="java.io.File">${testSourceRoot}</testSourceRoot>
        <trace implementation="boolean">${camel.trace}</trace>
        <useKamelet implementation="java.lang.Boolean">${camel.useKamelet}</useKamelet>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.artifact.factory.ArtifactFactory</role>
          <field-name>artifactFactory</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.resolver.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.metadata.ArtifactMetadataSource</role>
          <field-name>metadataSource</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.MavenProjectBuilder</role>
          <field-name>projectBuilder</field-name>
        </requirement>
      </requirements>
    </mojo>
  </mojos>
  <dependencies>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-utils</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <type>jar</type>
      <version>2.0.7</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.mojo</groupId>
      <artifactId>exec-maven-plugin</artifactId>
      <type>jar</type>
      <version>3.1.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-exec</artifactId>
      <type>jar</type>
      <version>1.3</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.plugin-tools</groupId>
      <artifactId>maven-plugin-annotations</artifactId>
      <type>jar</type>
      <version>3.9.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-core</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-core-engine</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-api</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-base-engine</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-core-reifier</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-core-processor</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-management-api</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-support</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-util</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-core-languages</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-core-model</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-xml-jaxp-util</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-bean</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-browse</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-cluster</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-controlbus</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-dataformat</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-dataset</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-direct</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-file</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-health</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-language</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-log</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-mock</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-ref</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-rest</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-tooling-model</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-saga</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-scheduler</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-seda</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-stub</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-timer</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-validator</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-xpath</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-xslt</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-xml-io</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-xml-io-util</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-xml-jaxb</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>jakarta.xml.bind</groupId>
      <artifactId>jakarta.xml.bind-api</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>jakarta.activation</groupId>
      <artifactId>jakarta.activation-api</artifactId>
      <type>jar</type>
      <version>2.1.0</version>
    </dependency>
    <dependency>
      <groupId>com.sun.xml.bind</groupId>
      <artifactId>jaxb-core</artifactId>
      <type>jar</type>
      <version>4.0.3</version>
    </dependency>
    <dependency>
      <groupId>org.eclipse.angus</groupId>
      <artifactId>angus-activation</artifactId>
      <type>jar</type>
      <version>2.0.1</version>
    </dependency>
    <dependency>
      <groupId>com.sun.xml.bind</groupId>
      <artifactId>jaxb-impl</artifactId>
      <type>jar</type>
      <version>4.0.3</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-xml-jaxp</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-yaml-io</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-core-catalog</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-util-json</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.dataformat</groupId>
      <artifactId>jackson-dataformat-yaml</artifactId>
      <type>jar</type>
      <version>2.15.2</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <type>jar</type>
      <version>2.15.2</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-annotations</artifactId>
      <type>jar</type>
      <version>2.15.2</version>
    </dependency>
    <dependency>
      <groupId>org.yaml</groupId>
      <artifactId>snakeyaml</artifactId>
      <type>jar</type>
      <version>2.0</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-core</artifactId>
      <type>jar</type>
      <version>2.15.2</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-spring-main</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-spring</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-core</artifactId>
      <type>jar</type>
      <version>6.0.11</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-jcl</artifactId>
      <type>jar</type>
      <version>6.0.11</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-aop</artifactId>
      <type>jar</type>
      <version>6.0.11</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context</artifactId>
      <type>jar</type>
      <version>6.0.11</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-beans</artifactId>
      <type>jar</type>
      <version>6.0.11</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-expression</artifactId>
      <type>jar</type>
      <version>6.0.11</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-tx</artifactId>
      <type>jar</type>
      <version>6.0.11</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-main</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-base</artifactId>
      <type>jar</type>
      <version>4.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.fusesource.jansi</groupId>
      <artifactId>jansi</artifactId>
      <type>jar</type>
      <version>2.4.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-api</artifactId>
      <type>jar</type>
      <version>2.20.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-slf4j2-impl</artifactId>
      <type>jar</type>
      <version>2.20.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-core</artifactId>
      <type>jar</type>
      <version>2.20.0</version>
    </dependency>
  </dependencies>
</plugin>