package org.apache.camel.component.cxf.soap.headers;

import java.net.MalformedURLException;
import java.net.URL;
import jakarta.annotation.Generated;
import javax.xml.namespace.QName;
import jakarta.xml.ws.WebEndpoint;
import jakarta.xml.ws.WebServiceClient;
import jakarta.xml.ws.WebServiceFeature;
import jakarta.xml.ws.Service;

/**
 * This class was generated by Apache CXF 4.0.2
 * 2023-09-20T21:17:57.025+01:00
 * Generated source version: 4.0.2
 *
 */
@WebServiceClient(name = "HeaderService",
                  wsdlLocation = "file:/Users/anuragvuppala/anurag-projects/live_f1/apache-camel-4.0.0/components/camel-cxf/camel-cxf-spring-soap/src/test/resources/soap_header.wsdl",
                  targetNamespace = "http://apache.org/camel/component/cxf/soap/headers")
@Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "2023-09-20T21:17:57.025+01:00", comments = "Apache CXF 4.0.2")
public class HeaderService extends Service {

    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "2023-09-20T21:17:57.025+01:00")
    public final static URL WSDL_LOCATION;

    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "2023-09-20T21:17:57.025+01:00")
    public final static QName SERVICE = new QName("http://apache.org/camel/component/cxf/soap/headers", "HeaderService");
    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "2023-09-20T21:17:57.025+01:00")
    public final static QName SoapPortRelayWithInsertion = new QName("http://apache.org/camel/component/cxf/soap/headers", "SoapPortRelayWithInsertion");
    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "2023-09-20T21:17:57.025+01:00")
    public final static QName SoapPortNoRelay = new QName("http://apache.org/camel/component/cxf/soap/headers", "SoapPortNoRelay");
    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "2023-09-20T21:17:57.025+01:00")
    public final static QName SoapPortCustomRelay = new QName("http://apache.org/camel/component/cxf/soap/headers", "SoapPortCustomRelay");
    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "2023-09-20T21:17:57.025+01:00")
    public final static QName SoapPortRelay = new QName("http://apache.org/camel/component/cxf/soap/headers", "SoapPortRelay");
    static {
        URL url = null;
        try {
            url = new URL("file:/Users/anuragvuppala/anurag-projects/live_f1/apache-camel-4.0.0/components/camel-cxf/camel-cxf-spring-soap/src/test/resources/soap_header.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(HeaderService.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "file:/Users/anuragvuppala/anurag-projects/live_f1/apache-camel-4.0.0/components/camel-cxf/camel-cxf-spring-soap/src/test/resources/soap_header.wsdl");
        }
        WSDL_LOCATION = url;
    }

    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "2023-09-20T21:17:57.025+01:00")
    public HeaderService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "2023-09-20T21:17:57.025+01:00")
    public HeaderService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "2023-09-20T21:17:57.025+01:00")
    public HeaderService() {
        super(WSDL_LOCATION, SERVICE);
    }

    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "2023-09-20T21:17:57.025+01:00")
    public HeaderService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "2023-09-20T21:17:57.025+01:00")
    public HeaderService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "2023-09-20T21:17:57.025+01:00")
    public HeaderService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns HeaderTester
     */
    @WebEndpoint(name = "SoapPortRelayWithInsertion")
    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "2023-09-20T21:17:57.025+01:00")
    public HeaderTester getSoapPortRelayWithInsertion() {
        return super.getPort(SoapPortRelayWithInsertion, HeaderTester.class);
    }

    /**
     *
     * @param features
     *     A list of {@link jakarta.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns HeaderTester
     */
    @WebEndpoint(name = "SoapPortRelayWithInsertion")
    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "2023-09-20T21:17:57.025+01:00")
    public HeaderTester getSoapPortRelayWithInsertion(WebServiceFeature... features) {
        return super.getPort(SoapPortRelayWithInsertion, HeaderTester.class, features);
    }


    /**
     *
     * @return
     *     returns HeaderTester
     */
    @WebEndpoint(name = "SoapPortNoRelay")
    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "2023-09-20T21:17:57.025+01:00")
    public HeaderTester getSoapPortNoRelay() {
        return super.getPort(SoapPortNoRelay, HeaderTester.class);
    }

    /**
     *
     * @param features
     *     A list of {@link jakarta.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns HeaderTester
     */
    @WebEndpoint(name = "SoapPortNoRelay")
    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "2023-09-20T21:17:57.025+01:00")
    public HeaderTester getSoapPortNoRelay(WebServiceFeature... features) {
        return super.getPort(SoapPortNoRelay, HeaderTester.class, features);
    }


    /**
     *
     * @return
     *     returns HeaderTester
     */
    @WebEndpoint(name = "SoapPortCustomRelay")
    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "2023-09-20T21:17:57.025+01:00")
    public HeaderTester getSoapPortCustomRelay() {
        return super.getPort(SoapPortCustomRelay, HeaderTester.class);
    }

    /**
     *
     * @param features
     *     A list of {@link jakarta.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns HeaderTester
     */
    @WebEndpoint(name = "SoapPortCustomRelay")
    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "2023-09-20T21:17:57.025+01:00")
    public HeaderTester getSoapPortCustomRelay(WebServiceFeature... features) {
        return super.getPort(SoapPortCustomRelay, HeaderTester.class, features);
    }


    /**
     *
     * @return
     *     returns HeaderTester
     */
    @WebEndpoint(name = "SoapPortRelay")
    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "2023-09-20T21:17:57.025+01:00")
    public HeaderTester getSoapPortRelay() {
        return super.getPort(SoapPortRelay, HeaderTester.class);
    }

    /**
     *
     * @param features
     *     A list of {@link jakarta.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns HeaderTester
     */
    @WebEndpoint(name = "SoapPortRelay")
    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "2023-09-20T21:17:57.025+01:00")
    public HeaderTester getSoapPortRelay(WebServiceFeature... features) {
        return super.getPort(SoapPortRelay, HeaderTester.class, features);
    }

}
